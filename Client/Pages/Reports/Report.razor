@page "/report/{weekEnding:datetime}"
@using DominosDriverHustleComp.Client.Components
@using DominosDriverHustleComp.Client.Services
@using DominosDriverHustleComp.Shared.ViewModels
@inject HttpClient Http
@inject SettingsService Settings

<PageTitle>Report Week Ending @WeekEnding.ToString("d")</PageTitle>

<div class="container">
    <button class="btn btn-primary mb-3" @onclick="EmailImageToStore">Email image to store</button>
    <table class="table table-sm">
        <thead>
            <tr>
                <th colspan="@_headingColSpan" class="text-center">Hustle Comp Week Ending @WeekEnding.ToString("d")</th>
            </tr>
            <tr>
                <th>Name</th>
                <th class="text-center">Hustle Out</th>
                <th class="text-center">Hustle In</th>
                <th class="text-center">Hustle Combined</th>

                @if (_showTracked)
                {
                <th class="text-center">Tracked %</th>
                }

                @if (_showOverspeed)
                {
                <th class="text-center">Overspeeds</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (_records is null)
            {
                <td colspan="4" class="text-center">Loading...</td>
            }
            else if (_records.Count == 0)
            {
                <td colspan="4" class="text-center">No records</td>
            }
            else
            {
                foreach (var record in _records.OrderBy(r => r.AvgOut + r.AvgIn))
                {
                    <DriverReportRowComponent Record="@record" ShowTracked="@_showTracked" ShowOverspeed="@_showOverspeed"></DriverReportRowComponent>
                }
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public DateTime WeekEnding { get; set; }

    private List<ReportRecord>? _records = null;
    private bool _showTracked = false;
    private bool _showOverspeed = false;
    private int _headingColSpan = 4;

    protected override async Task OnInitializedAsync()
    {
        var records = await Http.GetFromJsonAsync<IEnumerable<ReportRecord>>($"/api/Reports/{WeekEnding.ToString("s")}");

        if (records is null || !records.Any())
        {
            _records = [];
            return;
        }

        _records = records.ToList();

        _showTracked = _records.Any(r => r.TrackedPercentage < Settings.MinTrackedPercentage);
        _showOverspeed = _records.Any(r => r.NumOverspeeds >= Settings.MaxOverspeeds);

        _headingColSpan += _showTracked ? 1 : 0;
        _headingColSpan += _showOverspeed ? 1 : 0;

        InjectAverageRecord();
    }

    private void InjectAverageRecord()
    {
        var avgOut = _records.Average(r => r.AvgOut);
        var avgIn = _records.Average(r => r.AvgIn);

        _records.Add(new ReportRecord
        {
            Name = "Average",
            AvgOut = avgOut,
            AvgIn = avgIn,
            IsAverageRecord = true
        });
    }

    private async Task EmailImageToStore()
    {
        await Http.PostAsJsonAsync("/api/Screenshot", WeekEnding);
    }
}
